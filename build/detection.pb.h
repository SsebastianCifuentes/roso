// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_detection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_detection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_detection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_detection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_detection_2eproto;
namespace detection {
class DetectedObject;
struct DetectedObjectDefaultTypeInternal;
extern DetectedObjectDefaultTypeInternal _DetectedObject_default_instance_;
}  // namespace detection
PROTOBUF_NAMESPACE_OPEN
template<> ::detection::DetectedObject* Arena::CreateMaybeMessage<::detection::DetectedObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace detection {

enum DetectedObject_ObjectType : int {
  DetectedObject_ObjectType_ROBOT = 0,
  DetectedObject_ObjectType_BALL = 1,
  DetectedObject_ObjectType_DetectedObject_ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DetectedObject_ObjectType_DetectedObject_ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DetectedObject_ObjectType_IsValid(int value);
constexpr DetectedObject_ObjectType DetectedObject_ObjectType_ObjectType_MIN = DetectedObject_ObjectType_ROBOT;
constexpr DetectedObject_ObjectType DetectedObject_ObjectType_ObjectType_MAX = DetectedObject_ObjectType_BALL;
constexpr int DetectedObject_ObjectType_ObjectType_ARRAYSIZE = DetectedObject_ObjectType_ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedObject_ObjectType_descriptor();
template<typename T>
inline const std::string& DetectedObject_ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DetectedObject_ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DetectedObject_ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DetectedObject_ObjectType_descriptor(), enum_t_value);
}
inline bool DetectedObject_ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DetectedObject_ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DetectedObject_ObjectType>(
    DetectedObject_ObjectType_descriptor(), name, value);
}
// ===================================================================

class DetectedObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:detection.DetectedObject) */ {
 public:
  inline DetectedObject() : DetectedObject(nullptr) {}
  ~DetectedObject() override;
  explicit PROTOBUF_CONSTEXPR DetectedObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectedObject(const DetectedObject& from);
  DetectedObject(DetectedObject&& from) noexcept
    : DetectedObject() {
    *this = ::std::move(from);
  }

  inline DetectedObject& operator=(const DetectedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedObject& operator=(DetectedObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectedObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectedObject* internal_default_instance() {
    return reinterpret_cast<const DetectedObject*>(
               &_DetectedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectedObject& a, DetectedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectedObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectedObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetectedObject& from) {
    DetectedObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "detection.DetectedObject";
  }
  protected:
  explicit DetectedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DetectedObject_ObjectType ObjectType;
  static constexpr ObjectType ROBOT =
    DetectedObject_ObjectType_ROBOT;
  static constexpr ObjectType BALL =
    DetectedObject_ObjectType_BALL;
  static inline bool ObjectType_IsValid(int value) {
    return DetectedObject_ObjectType_IsValid(value);
  }
  static constexpr ObjectType ObjectType_MIN =
    DetectedObject_ObjectType_ObjectType_MIN;
  static constexpr ObjectType ObjectType_MAX =
    DetectedObject_ObjectType_ObjectType_MAX;
  static constexpr int ObjectType_ARRAYSIZE =
    DetectedObject_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectType_descriptor() {
    return DetectedObject_ObjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectType_Name.");
    return DetectedObject_ObjectType_Name(enum_t_value);
  }
  static inline bool ObjectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ObjectType* value) {
    return DetectedObject_ObjectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kAngleFieldNumber = 4,
    kTeamFieldNumber = 5,
    kIdFieldNumber = 6,
  };
  // .detection.DetectedObject.ObjectType type = 1;
  void clear_type();
  ::detection::DetectedObject_ObjectType type() const;
  void set_type(::detection::DetectedObject_ObjectType value);
  private:
  ::detection::DetectedObject_ObjectType _internal_type() const;
  void _internal_set_type(::detection::DetectedObject_ObjectType value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float angle = 4;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // int32 team = 5;
  void clear_team();
  int32_t team() const;
  void set_team(int32_t value);
  private:
  int32_t _internal_team() const;
  void _internal_set_team(int32_t value);
  public:

  // int32 id = 6;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:detection.DetectedObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    float x_;
    float y_;
    float angle_;
    int32_t team_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_detection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectedObject

// .detection.DetectedObject.ObjectType type = 1;
inline void DetectedObject::clear_type() {
  _impl_.type_ = 0;
}
inline ::detection::DetectedObject_ObjectType DetectedObject::_internal_type() const {
  return static_cast< ::detection::DetectedObject_ObjectType >(_impl_.type_);
}
inline ::detection::DetectedObject_ObjectType DetectedObject::type() const {
  // @@protoc_insertion_point(field_get:detection.DetectedObject.type)
  return _internal_type();
}
inline void DetectedObject::_internal_set_type(::detection::DetectedObject_ObjectType value) {
  
  _impl_.type_ = value;
}
inline void DetectedObject::set_type(::detection::DetectedObject_ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:detection.DetectedObject.type)
}

// float x = 2;
inline void DetectedObject::clear_x() {
  _impl_.x_ = 0;
}
inline float DetectedObject::_internal_x() const {
  return _impl_.x_;
}
inline float DetectedObject::x() const {
  // @@protoc_insertion_point(field_get:detection.DetectedObject.x)
  return _internal_x();
}
inline void DetectedObject::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void DetectedObject::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:detection.DetectedObject.x)
}

// float y = 3;
inline void DetectedObject::clear_y() {
  _impl_.y_ = 0;
}
inline float DetectedObject::_internal_y() const {
  return _impl_.y_;
}
inline float DetectedObject::y() const {
  // @@protoc_insertion_point(field_get:detection.DetectedObject.y)
  return _internal_y();
}
inline void DetectedObject::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void DetectedObject::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:detection.DetectedObject.y)
}

// float angle = 4;
inline void DetectedObject::clear_angle() {
  _impl_.angle_ = 0;
}
inline float DetectedObject::_internal_angle() const {
  return _impl_.angle_;
}
inline float DetectedObject::angle() const {
  // @@protoc_insertion_point(field_get:detection.DetectedObject.angle)
  return _internal_angle();
}
inline void DetectedObject::_internal_set_angle(float value) {
  
  _impl_.angle_ = value;
}
inline void DetectedObject::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:detection.DetectedObject.angle)
}

// int32 team = 5;
inline void DetectedObject::clear_team() {
  _impl_.team_ = 0;
}
inline int32_t DetectedObject::_internal_team() const {
  return _impl_.team_;
}
inline int32_t DetectedObject::team() const {
  // @@protoc_insertion_point(field_get:detection.DetectedObject.team)
  return _internal_team();
}
inline void DetectedObject::_internal_set_team(int32_t value) {
  
  _impl_.team_ = value;
}
inline void DetectedObject::set_team(int32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:detection.DetectedObject.team)
}

// int32 id = 6;
inline void DetectedObject::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t DetectedObject::_internal_id() const {
  return _impl_.id_;
}
inline int32_t DetectedObject::id() const {
  // @@protoc_insertion_point(field_get:detection.DetectedObject.id)
  return _internal_id();
}
inline void DetectedObject::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void DetectedObject::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:detection.DetectedObject.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace detection

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::detection::DetectedObject_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::detection::DetectedObject_ObjectType>() {
  return ::detection::DetectedObject_ObjectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_detection_2eproto
